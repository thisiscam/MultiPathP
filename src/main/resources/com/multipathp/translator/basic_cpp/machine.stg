import "common.stg"

PrefixEntryFunctionName(stateName) ::= "<stateName>Entry"
EntryFunctionName(state) ::= "<PrefixEntryFunctionName(state.name)>"

InvokeAuxFunction(function) ::= <<
<if(function.name)>self-><function.name>(<if(function.params)>payload<endif>);<endif>
>>

EntryFunction(state) ::= <<
static inline void <EntryFunctionName(state)>(<machineName(machine)>* self, const PAny& payload) {
    self->states.setTop(<stateId(state)>);
    <InvokeAuxFunction(state.entryFunction)>
}
>>

TransitionFunctionWrapperSuffix(functionName) ::= "<functionName>_Wrap"
TransitionFunctionWrapperName(function) ::= "<TransitionFunctionWrapperSuffix(function.name)>"

TransitionFunction(function) ::= <<
static inline void <TransitionFunctionWrapperName(function)>(<machineName(machine)>* self, const PAny& payload) {
    <InvokeAuxFunction(function)>
}
>>

JumpTableRow(e) ::= <<
{<eventId(e)>, <if(state.transitionsMap.(e))>E(<(functionNameTemplate)()>)<else>NULL<endif>}
>>

JumpTableRows(state) ::= <<
{<stateId(state)>, {<program.eventDecls:JumpTableRow(); separator=",">}}
>>

JumpTable(functionNameTemplate) ::= <<
{
    <machine.stateDecls:JumpTableRows(); separator=",\n">
}
>>

TransitionJumpTableInner() ::= <<
<if(state.transitionsMap.(e).push)>pushTransition<elseif(state.transitionsMap.(e).functionName)><TransitionFunctionWrapperSuffix(state.transitionsMap.(e).functionName)><else>emptyTransition<endif>
>>

EntryJumpTableInner() ::= <<
<if(state.transitionsMap.(e).toStateName)><PrefixEntryFunctionName(state.transitionsMap.(e).toStateName)><else>emptyEntry<endif>
>>

MachineImplementationFile(projectName, program, machine) ::= <<
namespace <projectName> {

class <machineName(machine)> final : public PMachine {
    friend class Scheduler;
public:
    <machineName(machine)>(ExecutionEngine& engine):PMachine(engine) { }

    inline void start(const PAny& payload) override {
        <EntryFunctionName(machine.startState)>(this, payload);
    }

    inline const string& getName() const override {
        static const string _name = "<machineName(machine)>";
        return _name;  
    }

private:
    <machine.stateDecls:{state | DECL_STATE(<state.name>);}; separator="\n">
    <machine.stateDecls:{state | #define <state.name> _<state.name>()}; separator="\n">

    /* region Entry Methods */
    <machine.stateDecls:EntryFunction(); separator="\n\n">
    /* end Entry Methods */

    /* region Transition Methods */
    <machine.uniqueTransitions:TransitionFunction(); separator="\n\n">
    /* end Transition Methods */

    /* region Function Implementations */
    <machine.funDecls.values:FunctionImplementation(); separator="\n\n">
    /* end Function Implementations */

    /* region Machine Fields */
    <machine.varDecls.keys:{varName | <type(machine.varDecls.(varName))> <varName>;}; separator="\n">
    /* end Machine Fields  */

    /* region Jump Tables */
    inline const IsDeferedMapType& isDeferedMap() const override {
        static const IsDeferedMapType _isDefered = 
        {
            <machine.stateDecls:
            {state | {<stateId(state)>, {<program.eventDecls: 
                {e | {<eventId(e)>, <if(state.deferedEvents.(e.name))>true<else>false<endif>\}}; separator=",">\}\}}; separator=",\n">
        };
        return _isDefered; 
    }

    inline const IsGotoTransitionMapType& isGotoTransitionMap() const override {
        static const IsGotoTransitionMapType _isGotoTransition =
        {
            <machine.stateDecls:
            {state | {<stateId(state)>, {<program.eventDecls:
                {e | {<eventId(e)>, <if(state.transitionsMap.(e).toStateName)>true<else>false<endif>\}}; separator=",">\}\}};
                separator=",\n">
        };
        return _isGotoTransition;
    }

    inline const GetExitFunctionMapType& getExitFunctionMap() const override {
        #define E(f) ((ExitFunction)&<machineName(machine)>::f)
        static const GetExitFunctionMapType _exitFunctions = 
        {
            <machine.stateDecls: {state | {<stateId(state)>, E(<if(state.exitFunction)><state.exitFunction><else>emptyExit<endif>)\}}; separator=",\n">
        };
        #undef E
        return _exitFunctions;
    }

    inline const GetTransitionMapType& getTransitionMap() const override {
        #define E(f) ((TransitionFunction)&<machineName(machine)>::f)
        static const GetTransitionMapType _transitions = 
        <JumpTable("TransitionJumpTableInner")>;
        #undef E
        return _transitions;
    }

    inline const GetTransitionEntryMapType& getTransitionEntryMap() const override {
        #define E(f) ((EntryFunction)&<machineName(machine)>::f)
        static const GetTransitionEntryMapType _entries = 
        <JumpTable("EntryJumpTableInner")>;
        #undef E
        return _entries;
    }
    /* end Jump Tables */
};

};
>>
