import "common.stg"

BuiltInEvents ::= [
	"$EVENT_NULL$": [],
	"$EVENT_HALT$": [],
	default: key
]

AnnounceHandlerName(event) ::= "Announce<event.name>Handler"

AnnounceHandlerTable() ::= <<
{
    <program.eventDecls: {e | <if(program.observeMap.(e))><AnnounceHandlerName(e)><else>announceEmpty<endif>}; separator=",">
}
>>

AnnounceMachineName(machine) ::= "<machineName(machine)>Instance"

AnnounceMachineGetterImpl(machine) ::= <<
static inline PMachine*& get<AnnounceMachineName(machine)>() {
    static PMachine* _m = nullptr;
    return _m;
}
>>

AnnounceMachineGetterInit(machine) ::= <<
get<AnnounceMachineName(machine)>() = new <machineName(machine)>(engine);
get<AnnounceMachineName(machine)>()->start();
>>

AnnounceHandlerImpl(e) ::= <<
static inline void <AnnounceHandlerName(e)>(const PAny& payload) {
    <program.observeMap.(e):{m | get<AnnounceMachineName(m)>()->serveEvent(<e.name>, payload);}; separator="\n">
}
>>

HeaderFile(declTypes, projectName, program) ::= <<
#ifndef <projectName>_H
#define <projectName>_H

#define DECL_TYPES List\<<declTypes:type(); separator=", ">\>
#include "PCppRuntime.h"

using namespace RUNTIME_NAMESPACE;

namespace <projectName> {

<program.eventDecls:{e | <if(BuiltInEvents.(e.name))>DECL_EVENT(<e.name>);
<endif>}><\\>

<program.machines:{m | class <machineName(m)>;}; separator="\n">

class Controller {
using AnnounceHandlerPtr = void (*)(const PAny&);
public:
	
	static inline Ptr\<PMachine> createMainMachine(ExecutionEngine&);

    static inline void announceEmpty(const PAny& payload) { }

    <program.observeMap:AnnounceHandlerImpl(); separator="\n">

	static inline void announce(const Int& event, const PAny& payload) {
        static AnnounceHandlerPtr _handlers[<length(program.eventDecls)>] =
        <AnnounceHandlerTable()>;
        auto&& ptr = getIndex1D(_handlers, event);
        return INVOKE_PTR(ptr, void, (payload));
	}

private:
    <program.observeMachines:AnnounceMachineGetterImpl(); separator="\n">
};

}

<program.machines:{m | #include "<MachineImplementationFileName(m)>"}; separator="\n">

inline Ptr\<PMachine> 
<projectName>::Controller::createMainMachine(ExecutionEngine& engine) {
    <program.observeMachines:AnnounceMachineGetterInit(); separator="\n">
    return PMachine::alloc\<<machineName(program.mainMachine)>\>(engine);
}
#endif
>>
