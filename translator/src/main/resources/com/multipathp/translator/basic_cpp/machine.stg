import "common.stg"

PrefixEntryFunctionName(stateName) ::= "<stateName>Entry"
EntryFunctionName(state) ::= "<PrefixEntryFunctionName(state.name)>"

InvokeAuxFunction(function) ::= <<
<if(function.name)><function.name>(<if(function.params)><cast(first(function.params.values), "payload")><endif>);<endif>
>>

EntryFunction(state) ::= <<
inline void <EntryFunctionName(state)>(const PAny& payload) {
    states.setTop(<state.name>);
    <InvokeAuxFunction(state.entryFunction)>
}
>>

TransitionFunctionWrapperName(function) ::= "<function.name>_Wrap"

TransitionFunction(function) ::= <<
inline void <TransitionFunctionWrapperName(function)>(const PAny& payload) {
    <InvokeAuxFunction(function)>
}
>>

JumpTableRow(e) ::= <<
<if(state.transitionsMap.(e))>E(<(functionNameTemplate)()>)<else>NULL<endif>
>>

JumpTableRows(state) ::= <<
{<program.eventDecls:JumpTableRow(); separator=",">}
>>

JumpTable(functionNameTemplate) ::= <<
{
    <machine.stateDecls:JumpTableRows(); separator=",\n">
}
>>

TransitionJumpTableInner() ::= <<
<if(state.transitionsMap.(e).isPush)>pushTransition<elseif(state.transitionsMap.(e).functionName)><state.transitionsMap.(e).functionName><else>emptyTransition<endif>
>>

EntryJumpTableInner() ::= <<
<if(state.transitionsMap.(e).toStateName)><PrefixEntryFunctionName(state.transitionsMap.(e).toStateName)><else>emptyEntry<endif>
>>

MachineImplementationFile(projectName, program, machine) ::= <<
namespace <projectName> {

class <machineName(machine)> final : public PMachine {
    friend class Scheduler;
public:
    <machineName(machine)>(ExecutionEngine& engine):PMachine(engine) { }

    inline void start(const PAny& payload) override {
        <EntryFunctionName(machine.startState)>(payload);
    }

private:
    enum {
        <rest(machine.stateDecls):{state | <state.name> = <i>}; separator=",\n">
    };

    /* region Entry Methods */
    <rest(machine.stateDecls):EntryFunction(); separator="\n\n">
    /* end Entry Methods */

    /* region Transition Methods */
    <machine.uniqueTransitions:TransitionFunction(); separator="\n\n">
    /* end Transition Methods */

    /* region Function Implementations */
    <machine.funDecls.values:FunctionImplementation(); separator="\n\n">
    /* end Function Implementations */

    /* region Machine Fields */
    <machine.varDecls.keys:{varName | <type(machine.varDecls.(varName))> <varName> = <typeDefaultValue(machine.varDecls.(varName))>;}; separator="\n">
    /* end Machine Fields  */

    /* region Jump Tables */
    inline bool isDefered(int state, int event) const override {
        static const bool _isDefered[<length(machine.stateDecls)>][<length(program.eventDecls)>] = 
            {
                <machine.stateDecls:
                {state | {<program.eventDecls: 
                    {e | <if(state.deferedEvents.(e.name))> true<else>false<endif>}; separator=",">\} /* <state.name> */}; separator=",\n">
            };
        return _isDefered[state][event];
    }

    inline bool isGotoTransition(int state, int event) const override {
        static const bool _isGotoTransition[<length(machine.stateDecls)>][<length(program.eventDecls)>] =
            {
                <machine.stateDecls:
                {state | {<program.eventDecls:
                    {e | <if(state.transitionsMap.(e).toStateName)> true<else>false<endif>}; separator=",">\} /* <state.name> */};
                    separator=",\n">
            };
        return _isGotoTransition[state][event];
    }

    inline ExitFunction getExitFunction(int state) const override {
        #define E(f) ((ExitFunction)&<machineName(machine)>::f)
        static ExitFunction _exitFunctions[] = {<machine.stateDecls: {state | &<machineName(machine)>::<if(state.exitFunction)>E(<state.exitFunction>)<else>emptyExit<endif>}; separator=",">};
        #undef E
        return _exitFunctions[state];
    }

    inline TransitionFunction getTransition(int state, int event) const override {
        #define E(f) ((TransitionFunction)&<machineName(machine)>::f)
        static TransitionFunction _transitions[<length(machine.stateDecls)>][<length(program.eventDecls)>] = 
            <JumpTable("TransitionJumpTableInner")>;
        #undef E
        return _transitions[state][event];
    }

    inline EntryFunction getTransitionEntry(int state, int event) const override {
        #define E(f) ((TransitionFunction)&<machineName(machine)>::f)
        static TransitionFunction _entries[<length(machine.stateDecls)>][<length(program.eventDecls)>] = 
            <JumpTable("EntryJumpTableInner")>;
        #undef E
        return _entries[state][event];
    }
    /* end Jump Tables */
};

};
>>
