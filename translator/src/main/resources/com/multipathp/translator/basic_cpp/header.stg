import "common.stg"

BuiltInEvents ::= [
	"$EVENT_NULL$": [],
	"$EVENT_HALT$": [],
	default: key
]

HeaderFile(declTypes, projectName, program) ::= <<
#ifndef <projectName>_H
#define <projectName>_H

#define DECL_TYPES List\<<declTypes:type(); separator=", ">\>
#include "basic_cpp_runtime.h"

using namespace RUNTIME_NAMESPACE;

namespace <projectName> {

<program.eventDecls:{e | <if(BuiltInEvents.(e.name))>const int <e.name> = <i0>;
<endif>}><\\>

<program.machines:{m | class <machineName(m)>;}; separator="\n">

};

<program.machines:{m | #include "<MachineImplementationFileName(m)>"}; separator="\n">

namespace <projectName> {

class Controller {
public:
	
	static inline Ptr\<PMachine> createMainMachine(ExecutionEngine& engine) {
		return new <machineName(program.mainMachine)>(engine);
	}

	static inline void announce(const Int& event, const PAny& payload) {

	}
};

}

#endif
>>
